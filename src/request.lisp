(in-package :house)

(defclass request ()
  ((http-method :accessor http-method :initarg :http-method)
   (resource :accessor resource :initarg :resource)
   (headers :accessor headers :initarg :headers :initform nil)
   (session-tokens :accessor session-tokens :initarg :session-tokens :initform nil)
   (parameters :accessor parameters :initarg :parameters :initform nil)
   (session :accessor session :initarg :session :initform nil)
   (socket-of :accessor socket-of :initarg :socket-of :initform nil)))

(defun parse-param-string (params)
  (loop for pair in (split "&" params)
	for (name val) = (split "=" pair)
	collect (cons (->keyword name) (or val ""))))

(defun parse-cookies (cookie)
  (assert (stringp cookie))
  (loop for c in (split "; " cookie) for s = (split "=" c)
     if (and (string= "name" (first s)) (second s)) collect (second s)
     else collect c))

(defun parse-request-string (str)
  (let ((lines (split "\\r?\\n" str))
	(expecting 0))
    (destructuring-bind (http-method path http-version) (split " " (pop lines))
      (assert-http (string= http-version "HTTP/1.1"))
      (let* ((path-pieces (split "\\?" path))
	     (resource (first path-pieces))
	     (parameters (second path-pieces))
	     (req (make-instance 'request :resource resource :http-method (->keyword http-method))))
	(loop for header = (pop lines) for (name value) = (split ": " header)
	   until (null name)
	   for n = (->keyword name)
	   if (eq n :cookie) do (setf (session-tokens req) (parse-cookies value))
	   else if (eq n :content-length) do (setf expecting (parse-integer value))
	   else do (push (cons n value) (headers req)))
	(setf (parameters req) (parse-param-string parameters))
	(values req expecting)))))
